# This file was automatically generated by ./tool/generate_ast.py

from __future__ import annotations
import abc

from .token import Token

class Expr:
    @abc.abstractmethod
    def accept_str(self, visitor: Expr) -> str:
        pass

    class VisitorString(abc.ABC):
        @abc.abstractmethod
        def visit_binary_expr_str(self, expr: Binary) -> str:
            pass

        @abc.abstractmethod
        def visit_grouping_expr_str(self, expr: Grouping) -> str:
            pass

        @abc.abstractmethod
        def visit_literal_expr_str(self, expr: Literal) -> str:
            pass

        @abc.abstractmethod
        def visit_unary_expr_str(self, expr: Unary) -> str:
            pass


    @abc.abstractmethod
    def accept_object(self, visitor: Expr) -> object:
        pass

    class VisitorObject(abc.ABC):
        @abc.abstractmethod
        def visit_binary_expr_object(self, expr: Binary) -> object:
            pass

        @abc.abstractmethod
        def visit_grouping_expr_object(self, expr: Grouping) -> object:
            pass

        @abc.abstractmethod
        def visit_literal_expr_object(self, expr: Literal) -> object:
            pass

        @abc.abstractmethod
        def visit_unary_expr_object(self, expr: Unary) -> object:
            pass


class Binary(Expr):
    def __init__(self, left: Expr, operator: Token, right: Expr):
        self.left: Expr = left
        self.operator: Token = operator
        self.right: Expr = right

    def accept_str(self, visitor: Expr.VisitorString) -> str:
        return visitor.visit_binary_expr_str(self)

    def accept_object(self, visitor: Expr.VisitorObject) -> object:
        return visitor.visit_binary_expr_object(self)

class Grouping(Expr):
    def __init__(self, expression: Expr):
        self.expression: Expr = expression

    def accept_str(self, visitor: Expr.VisitorString) -> str:
        return visitor.visit_grouping_expr_str(self)

    def accept_object(self, visitor: Expr.VisitorObject) -> object:
        return visitor.visit_grouping_expr_object(self)

class Literal(Expr):
    def __init__(self, value):
        self.value = value

    def accept_str(self, visitor: Expr.VisitorString) -> str:
        return visitor.visit_literal_expr_str(self)

    def accept_object(self, visitor: Expr.VisitorObject) -> object:
        return visitor.visit_literal_expr_object(self)

class Unary(Expr):
    def __init__(self, operator: Token, right: Expr):
        self.operator: Token = operator
        self.right: Expr = right

    def accept_str(self, visitor: Expr.VisitorString) -> str:
        return visitor.visit_unary_expr_str(self)

    def accept_object(self, visitor: Expr.VisitorObject) -> object:
        return visitor.visit_unary_expr_object(self)


