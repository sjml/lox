# This file was automatically generated by ./tool/generate_ast.py

from __future__ import annotations
import abc

from .scanner import Token

class Expr:
    @abc.abstractmethod
    def accept(self, visitor: Expr) -> str:
        pass

class ExprVisitor(abc.ABC):
    @abc.abstractmethod
    def visit_binary_expr(self, expr: Binary) -> str:
        pass

    @abc.abstractmethod
    def visit_grouping_expr(self, expr: Grouping) -> str:
        pass

    @abc.abstractmethod
    def visit_literal_expr(self, expr: Literal) -> str:
        pass

    @abc.abstractmethod
    def visit_unary_expr(self, expr: Unary) -> str:
        pass


class Binary(Expr):
    def __init__(self, left: Expr, operator: Token, right: Expr):
        self.left: Expr = left
        self.operator: Token = operator
        self.right: Expr = right

    def accept(self, visitor: ExprVisitor) -> str:
        return visitor.visit_binary_expr(self)

class Grouping(Expr):
    def __init__(self, expression: Expr):
        self.expression: Expr = expression

    def accept(self, visitor: ExprVisitor) -> str:
        return visitor.visit_grouping_expr(self)

class Literal(Expr):
    def __init__(self, value):
        self.value = value

    def accept(self, visitor: ExprVisitor) -> str:
        return visitor.visit_literal_expr(self)

class Unary(Expr):
    def __init__(self, operator: Token, right: Expr):
        self.operator: Token = operator
        self.right: Expr = right

    def accept(self, visitor: ExprVisitor) -> str:
        return visitor.visit_unary_expr(self)


