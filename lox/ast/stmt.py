# This file was automatically generated by ./tool/generate_ast.py

from __future__ import annotations
import abc

from ..token import Token
from .expr import Expr

class Stmt:
    @abc.abstractmethod
    def accept(self, visitor: Stmt):
        pass

class StmtVisitor(abc.ABC):
    @abc.abstractmethod
    def visit_block_stmt(self, stmt: Block):
        pass

    @abc.abstractmethod
    def visit_expression_stmt(self, stmt: Expression):
        pass

    @abc.abstractmethod
    def visit_if_stmt(self, stmt: If):
        pass

    @abc.abstractmethod
    def visit_print_stmt(self, stmt: Print):
        pass

    @abc.abstractmethod
    def visit_var_stmt(self, stmt: Var):
        pass

    @abc.abstractmethod
    def visit_while_stmt(self, stmt: While):
        pass


class Block(Stmt):
    def __init__(self, statements: list[Expr]):
        self.statements: list[Expr] = statements

    def accept(self, visitor: Stmt.Visitor):
        return visitor.visit_block_stmt(self)

class Expression(Stmt):
    def __init__(self, expression: Expr):
        self.expression: Expr = expression

    def accept(self, visitor: Stmt.Visitor):
        return visitor.visit_expression_stmt(self)

class If(Stmt):
    def __init__(self, condition: Expr, then_branch: Stmt, else_branch: Stmt):
        self.condition: Expr = condition
        self.then_branch: Stmt = then_branch
        self.else_branch: Stmt = else_branch

    def accept(self, visitor: Stmt.Visitor):
        return visitor.visit_if_stmt(self)

class Print(Stmt):
    def __init__(self, expression: Expr):
        self.expression: Expr = expression

    def accept(self, visitor: Stmt.Visitor):
        return visitor.visit_print_stmt(self)

class Var(Stmt):
    def __init__(self, name: Token, initializer: Expr):
        self.name: Token = name
        self.initializer: Expr = initializer

    def accept(self, visitor: Stmt.Visitor):
        return visitor.visit_var_stmt(self)

class While(Stmt):
    def __init__(self, condition: Expr, body: Stmt):
        self.condition: Expr = condition
        self.body: Stmt = body

    def accept(self, visitor: Stmt.Visitor):
        return visitor.visit_while_stmt(self)


