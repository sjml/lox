import sys
import os
import io

def define_type(out_file: io.TextIOWrapper, base_name: str, class_name: str, field_list: str):
    out_file.write(f"class {class_name}({base_name}):\n")
    out_file.write(f"    def __init__(self, {field_list}):\n")
    for field in [f.strip() for f in field_list.split(",")]:
        name, *_ = [sf.strip() for sf in field.split(":")]
        out_file.write(f"        self.{field} = {name}\n")
    out_file.write("\n")
    out_file.write(f"    def accept(self, visitor: {base_name}Visitor) -> str:\n")
    out_file.write(f"        return visitor.visit_{class_name.lower()}_{base_name.lower()}(self)\n")
    out_file.write("\n")

def define_ast(output_path: str, base_name: str, types: list[str]):
    type_datums = [[st.strip() for st in sub_type.split(":", 1)] for sub_type in types]

    out_file = open(output_path, "w")

    out_file.write("# This file was automatically generated by ./tool/generate_ast.py\n\n")
    out_file.write("from __future__ import annotations\n")
    out_file.write("import abc\n\n")
    out_file.write("from .scanner import Token\n\n")
    out_file.write(f"class {base_name}:\n")
    out_file.write(f"    @abc.abstractmethod\n    def accept(self, visitor: {base_name}) -> str:\n        pass\n\n")
    out_file.write(f"class {base_name}Visitor(abc.ABC):\n")
    for class_name, _ in type_datums:
        out_file.write(f"    @abc.abstractmethod\n    def visit_{class_name.lower()}_{base_name.lower()}(self, {base_name.lower()}: {class_name}) -> str:\n        pass\n\n")
    out_file.write("\n")

    for class_name, fields in type_datums:
        define_type(out_file, base_name, class_name, fields)

    out_file.write("\n")
    out_file.close()


def main(args: list[str]):
    if len(args) != 1:
        sys.stderr.write("Usage: generate_ast <output_path>")
        sys.exit(64)

    output_path = args[0]

    define_ast(output_path, "Expr", [
        "Binary   : left: Expr, operator: Token, right: Expr",
        "Grouping : expression: Expr",
        "Literal  : value",
        "Unary    : operator: Token, right: Expr",
    ])


if __name__ == "__main__":
    own_dir = os.path.dirname(os.path.realpath(__file__))
    main([os.path.join(own_dir, "..", "ast.py")])
